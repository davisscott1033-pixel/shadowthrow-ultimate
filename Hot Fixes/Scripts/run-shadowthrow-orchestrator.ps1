# run-shadowthrow-orchestrator.ps1 (patched)
# One-click orchestration for ShadowThrow on Windows
# - Fix Next configs
# - Ensure .env.local for imported
# - Install deps
# - Prisma db setup
# - Kill ports 3000/3001 if busy
# - Start both dev servers in separate terminals
# - Verify ports are up
# - Open browser tabs

$ErrorActionPreference = "Stop"

function Info($m){ Write-Host "[INFO] $m" -ForegroundColor Cyan }
function Ok($m){ Write-Host "[OK]  $m" -ForegroundColor Green }
function Warn($m){ Write-Host "[WARN] $m" -ForegroundColor Yellow }
function Err($m){ Write-Host "[ERR] $m" -ForegroundColor Red }

# --- Helpers ---
function Get-PidOnPort([int]$Port){
  $lines = (netstat -ano | Select-String ":$Port").ToString().Split("`n")
  foreach($line in $lines){
    if ($line -match "LISTENING\s+(\d+)$" -or $line -match "ESTABLISHED\s+(\d+)$"){
      return [int]$Matches[1]
    }
  }
  return $null
}

function Kill-Port([int]$Port){
  $pid = Get-PidOnPort -Port $Port
  if ($pid) {
    Warn "Killing PID ${pid} on port $Port"
    try { taskkill /PID $pid /F | Out-Null; Start-Sleep -Milliseconds 300 } catch { Warn "Failed to kill PID ${pid}: $($_.Exception.Message)" }
  } else {
    Info "No process found on port $Port"
  }
}

function Wait-For-Http([string]$Url, [int]$TimeoutSec=60){
  $deadline = (Get-Date).AddSeconds($TimeoutSec)
  while((Get-Date) -lt $deadline){
    try {
      $r = Invoke-WebRequest -Uri $Url -UseBasicParsing -TimeoutSec 5
      if ($r.StatusCode -ge 200 -and $r.StatusCode -lt 500) { return $true }
    } catch {}
    Start-Sleep -Milliseconds 600
  }
  return $false
}

function Start-Dev([string]$RepoRoot, [string]$Filter){
  $cmd = "Set-Location `"$RepoRoot`"; pnpm --filter $Filter dev"
  Start-Process powershell -ArgumentList "-NoExit","-Command",$cmd | Out-Null
  Info "Started dev server for $Filter"
}

# --- Paths ---
$RepoRoot = Split-Path -Parent $MyInvocation.MyCommand.Path
$WebDir = Join-Path $RepoRoot "apps\web"
$ImpDir = Join-Path $RepoRoot "apps\imported"
$WebConfig = Join-Path $WebDir "next.config.mjs"
$ImpConfig = Join-Path $ImpDir "next.config.mjs"
$ImpEnvLocal = Join-Path $ImpDir ".env.local"
$ImpEnvExample = Join-Path $ImpDir ".env.example"

if (-not (Test-Path $WebDir) -or -not (Test-Path $ImpDir)) {
  Err "Expected apps\\web and apps\\imported under $RepoRoot"
  exit 1
}

# --- 1) Patch Next configs ---
$webCfg = @"
/** @type {import('next').NextConfig} */
const nextConfig = {
  typedRoutes: true,
  transpilePackages: ['@shadow/ui'],
};
export default nextConfig;
"@
Set-Content $WebConfig $webCfg -Encoding UTF8
Ok "Patched apps/web/next.config.mjs"

$impCfg = @"
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  typedRoutes: true,
  transpilePackages: ['@shadow/ui'],
  images: { remotePatterns: [{ protocol: 'https', hostname: '**' }] },
};
export default nextConfig;
"@
Set-Content $ImpConfig $impCfg -Encoding UTF8
Ok "Patched apps/imported/next.config.mjs"

# --- 2) Ensure .env.local for imported ---
if (-not (Test-Path $ImpEnvLocal)) {
  $secret = [Convert]::ToBase64String([byte[]](1..48 | ForEach-Object {Get-Random -Minimum 0 -Maximum 256}))
  $envText = @"
# Generated by orchestrator
NEXTAUTH_URL=http://localhost:3001
NEXTAUTH_SECRET=$secret

# Stripe (replace with real keys)
STRIPE_PUBLISHABLE_KEY=pk_test_xxx
STRIPE_SECRET_KEY=sk_test_xxx
# Optional for Stripe CLI
STRIPE_WEBHOOK_SECRET=whsec_xxx

NEXT_PUBLIC_SITE_URL=http://localhost:3001
DATABASE_URL=file:./prisma/shadowthrow.sqlite
"@
  Set-Content $ImpEnvLocal $envText -Encoding UTF8
  Ok "Created apps/imported/.env.local"
} else {
  Info ".env.local already exists; leaving it"
}

# --- 3) Install deps ---
Info "Installing workspace deps (pnpm install)"
pnpm install --reporter=append-only | Out-Null
Ok "pnpm install complete"

# --- 4) Prisma setup ---
Info "Prisma generate/push/seed (imported)"
pnpm --filter imported run db:generate | Out-Null
pnpm --filter imported run db:push | Out-Null
pnpm --filter imported run db:seed | Out-Null
Ok "Database ready"

# --- 5) Kill ports and start servers ---
$WebUrl = "http://localhost:3000"
$ImpUrl = "http://localhost:3001"

Kill-Port -Port 3000
Kill-Port -Port 3001

Start-Dev -RepoRoot $RepoRoot -Filter "web"
Start-Dev -RepoRoot $RepoRoot -Filter "imported"

# --- 6) Verify servers are up ---
Info "Waiting for $WebUrl ..."
$webReady = Wait-For-Http -Url $WebUrl -TimeoutSec 90
if ($webReady) { Ok "Web is up on 3000" } else { Err "Web did not start on 3000 within timeout"; }

Info "Waiting for $ImpUrl ..."
$impReady = Wait-For-Http -Url $ImpUrl -TimeoutSec 90
if ($impReady) { Ok "Imported is up on 3001" } else { Err "Imported did not start on 3001 within timeout"; }

# --- 7) Open browser tabs ---
if ($webReady) { Start-Process $WebUrl | Out-Null }
if ($impReady) { Start-Process $ImpUrl | Out-Null }

if (-not $webReady -or -not $impReady) {
  Warn "One or both servers failed to verify. Use the dev windows to see logs."
  exit 1
}

Ok "All good! Browser tabs opened."
